input {
	file {
		path => 'D:/elasticsearch/logstash/data/apache-access-logs/apache_*.log'
		start_position => 'beginning'
	}
	
	file {
		path => "D:/elasticsearch/logstash/data/apache-access-logs/java_errors.log"
		start_position => "beginning"

		codec => multiline {
			pattern => "^(\s+|\t)|(Caused by:)"
			what => "previous" # Merge with previous line
			auto_flush_interval => 5 # Flush event after 5 second
   		}
	}
	
	http { # receive request from http
		host => '127.0.0.1'
		port => 8989
	}
}

filter {
	if [headers][request_path] =~ "error" or [path] =~ "error" { # path field will be add by file input plugin
		mutate {
			replace => { "type" => "error" }
		}
	}else{
		mutate {
			replace => { "type" => "access" }
		}
		grok { # parse message
			match => { "message" => '%{COMMONAPACHELOG} "%{GREEDYDATA:referrer}" "%{GREEDYDATA:agent}"' }
		}
		
		if "_grokparsefailure" in [tags] {
			drop { } # Drop event when failure occured of parsing grok pattern
		}
		
		useragent{
			source => "agent"
			target => "ua" # Create field ua to hold information of agent
		}
		
		# Admin pages
		if [request] =~ /^\/admin\// {
			drop { } # drop event from admin pages
		}
		
		# Static files
		if [request] =~ /^\/js\//
			or [request] =~ /^\/css\//
			or [request] in [ "/robots.txt", "/favicon.ico"] {
			
			drop{ }
		}
		
		# Crawlers
		if [ua][device] == "Spider" {
			drop { }
		}
		
		mutate {
			convert => { # convert type
				"bytes" => "integer"
				"response" => "integer"
			}
		}
		
		geoip {
			source => "clientip"
		}
		
		date { # set time of the event
			match => ["timestamp" , "dd/MMM/yyyy:HH:mm:ss Z"] #format of field want to parse
			remove_field => ["timestamp"] #remove timestamp field
		}
	}
	
	
	mutate {
		remove_field => ["headers", "@version", "host"]
	}
	
}

output{
	
	#file {
	#	path => '%{type}_%{+yyyy-MM-dd}.log'
	#}
	
	if [type] == "access" {
		elasticsearch {
			hosts => "localhost:9200"
			#index => "%{type}-%{+YYYY.MM.dd}"
			document_type => "default"
			http_compression => true
		}
	} else {
		stdout{
			codec => rubydebug
		}
	}
}
